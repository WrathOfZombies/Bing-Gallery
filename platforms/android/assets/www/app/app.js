define(["require", "exports", './home/home.controller', './services/bing.service'], function (require, exports, home_controller_1, bing_service_1) {
    'use strict';
    function getViewTemplate(view) {
        return '/www/app/' + view + '/' + view + '.html';
    }
    var App = (function () {
        function App(module) {
            this.module = module;
            this.registerComponents();
            this.configureComponents();
            this.run();
        }
        App.prototype.registerComponents = function () {
            this.module.factory('BingImageService', ['$http', function ($http) { return new bing_service_1.BingImageService($http); }]);
            this.module.controller('HomeController', ['BingImageService', home_controller_1.HomeController]);
            this.module.directive('backImage', function () {
                return function (scope, element, attrs) {
                    var url = attrs.backImage;
                    element.css({
                        'background-image': 'url(' + url + ')',
                        'background-size': 'cover'
                    });
                };
            });
        };
        App.prototype.registerStates = function ($stateProvider, $locationProvider) {
            $stateProvider.state('home', {
                templateUrl: getViewTemplate('home'),
                controller: 'HomeController',
                controllerAs: 'home'
            });
            $locationProvider.html5Mode(true).hashPrefix('!');
        };
        App.prototype.configureComponents = function () {
            this.module.config(['$stateProvider', '$locationProvider', this.registerStates]);
        };
        App.prototype.run = function () {
            this.module.run(['$state', 'BingImageService', function ($state, BingImageService) {
                    $state.go('home');
                }]);
        };
        return App;
    })();
    exports.App = App;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9hcHAudHMiXSwibmFtZXMiOlsiZ2V0Vmlld1RlbXBsYXRlIiwiQXBwIiwiQXBwLmNvbnN0cnVjdG9yIiwiQXBwLnJlZ2lzdGVyQ29tcG9uZW50cyIsIkFwcC5yZWdpc3RlclN0YXRlcyIsIkFwcC5jb25maWd1cmVDb21wb25lbnRzIiwiQXBwLnJ1biJdLCJtYXBwaW5ncyI6IjtJQUFBLFlBQVksQ0FBQztJQVFiLHlCQUF5QixJQUFZO1FBQ2pDQSxNQUFNQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxHQUFHQSxHQUFHQSxHQUFJQSxJQUFJQSxHQUFHQSxPQUFPQSxDQUFDQTtJQUN0REEsQ0FBQ0E7SUFFRDtRQWdDSUMsYUFBb0JBLE1BQWtCQTtZQUFsQkMsV0FBTUEsR0FBTkEsTUFBTUEsQ0FBWUE7WUFDbENBLElBQUlBLENBQUNBLGtCQUFrQkEsRUFBRUEsQ0FBQ0E7WUFDMUJBLElBQUlBLENBQUNBLG1CQUFtQkEsRUFBRUEsQ0FBQ0E7WUFDM0JBLElBQUlBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2ZBLENBQUNBO1FBbkNPRCxnQ0FBa0JBLEdBQTFCQTtZQUNJRSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxrQkFBa0JBLEVBQUVBLENBQUNBLE9BQU9BLEVBQUVBLFVBQUNBLEtBQXNCQSxJQUFPQSxNQUFNQSxDQUFDQSxJQUFJQSwrQkFBZ0JBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3hIQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLENBQUNBLGtCQUFrQkEsRUFBRUEsZ0NBQWNBLENBQUNBLENBQUNBLENBQUNBO1lBQy9FQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxXQUFXQSxFQUFFQTtnQkFDL0IsTUFBTSxDQUFDLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLO29CQUNqQyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO29CQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDO3dCQUNSLGtCQUFrQixFQUFFLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRzt3QkFDdEMsaUJBQWlCLEVBQUUsT0FBTztxQkFDN0IsQ0FBQyxDQUFDO2dCQUNQLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQ0EsQ0FBQ0E7UUFDUEEsQ0FBQ0E7UUFFT0YsNEJBQWNBLEdBQXRCQSxVQUNJQSxjQUFvQ0EsRUFDcENBLGlCQUF1Q0E7WUFFdkNHLGNBQWNBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBO2dCQUN6QkEsV0FBV0EsRUFBRUEsZUFBZUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7Z0JBQ3BDQSxVQUFVQSxFQUFFQSxnQkFBZ0JBO2dCQUM1QkEsWUFBWUEsRUFBRUEsTUFBTUE7YUFDdkJBLENBQUNBLENBQUNBO1lBRUhBLGlCQUFpQkEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDdERBLENBQUNBO1FBRU9ILGlDQUFtQkEsR0FBM0JBO1lBQ0lJLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLGdCQUFnQkEsRUFBRUEsbUJBQW1CQSxFQUFFQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyRkEsQ0FBQ0E7UUFRREosaUJBQUdBLEdBQUhBO1lBQ0lLLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLFFBQVFBLEVBQUVBLGtCQUFrQkEsRUFBRUEsVUFBQ0EsTUFBMkJBLEVBQUVBLGdCQUFrQ0E7b0JBQzNHQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtnQkFDdEJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ1JBLENBQUNBO1FBQ0xMLFVBQUNBO0lBQURBLENBM0NBLEFBMkNDQSxJQUFBO0lBM0NZLFdBQUcsTUEyQ2YsQ0FBQSIsImZpbGUiOiJhcHAvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcclxuaW1wb3J0IGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbmltcG9ydCB1aSA9IHJlcXVpcmUoJ2FuZ3VsYXItdWktcm91dGVyJyk7XHJcbmltcG9ydCB7SG9tZUNvbnRyb2xsZXJ9IGZyb20gJy4vaG9tZS9ob21lLmNvbnRyb2xsZXInO1xyXG5pbXBvcnQge0JpbmdJbWFnZVNlcnZpY2V9IGZyb20gJy4vc2VydmljZXMvYmluZy5zZXJ2aWNlJztcclxuXHJcbmZ1bmN0aW9uIGdldFZpZXdUZW1wbGF0ZSh2aWV3OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICcvd3d3L2FwcC8nICsgdmlldyArICcvJyArICB2aWV3ICsgJy5odG1sJztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFwcCB7XHJcbiAgICBwcml2YXRlIHJlZ2lzdGVyQ29tcG9uZW50cygpIHtcclxuICAgICAgICB0aGlzLm1vZHVsZS5mYWN0b3J5KCdCaW5nSW1hZ2VTZXJ2aWNlJywgWyckaHR0cCcsICgkaHR0cDogbmcuSUh0dHBTZXJ2aWNlKSA9PiB7IHJldHVybiBuZXcgQmluZ0ltYWdlU2VydmljZSgkaHR0cCk7IH1dKTtcclxuICAgICAgICB0aGlzLm1vZHVsZS5jb250cm9sbGVyKCdIb21lQ29udHJvbGxlcicsIFsnQmluZ0ltYWdlU2VydmljZScsIEhvbWVDb250cm9sbGVyXSk7XHJcbiAgICAgICAgdGhpcy5tb2R1bGUuZGlyZWN0aXZlKCdiYWNrSW1hZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGF0dHJzLmJhY2tJbWFnZTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoJyArIHVybCArICcpJyxcclxuICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1zaXplJzogJ2NvdmVyJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWdpc3RlclN0YXRlcyhcclxuICAgICAgICAkc3RhdGVQcm92aWRlcjogbmcudWkuSVN0YXRlUHJvdmlkZXIsXHJcbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXI6IG5nLklMb2NhdGlvblByb3ZpZGVyXHJcbiAgICApIHtcclxuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnaG9tZScsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IGdldFZpZXdUZW1wbGF0ZSgnaG9tZScpLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnSG9tZUNvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdob21lJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSkuaGFzaFByZWZpeCgnIScpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29uZmlndXJlQ29tcG9uZW50cygpIHtcclxuICAgICAgICB0aGlzLm1vZHVsZS5jb25maWcoWyckc3RhdGVQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsIHRoaXMucmVnaXN0ZXJTdGF0ZXNdKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZHVsZTogbmcuSU1vZHVsZSkge1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21wb25lbnRzKCk7XHJcbiAgICAgICAgdGhpcy5jb25maWd1cmVDb21wb25lbnRzKCk7XHJcbiAgICAgICAgdGhpcy5ydW4oKTtcclxuICAgIH1cclxuXHJcbiAgICBydW4oKSB7XHJcbiAgICAgICAgdGhpcy5tb2R1bGUucnVuKFsnJHN0YXRlJywgJ0JpbmdJbWFnZVNlcnZpY2UnLCAoJHN0YXRlOiBuZy51aS5JU3RhdGVTZXJ2aWNlLCBCaW5nSW1hZ2VTZXJ2aWNlOiBCaW5nSW1hZ2VTZXJ2aWNlKSA9PiB7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xyXG4gICAgICAgIH1dKTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
