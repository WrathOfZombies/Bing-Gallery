define(["require", "exports"], function (require, exports) {
    'use strict';
    var ImageManager = (function () {
        function ImageManager(data) {
            this.images = this.parseXML(data);
        }
        ImageManager.prototype.parseXML = function (data) {
            var parser = new DOMParser();
            var xml = parser.parseFromString(data, 'application/xml');
            return this.xml2json(xml).images;
        };
        ImageManager.prototype.get = function () {
            return this.images.image;
        };
        ImageManager.prototype.xml2json = function (node) {
            try {
                var data = {};
                // append a value
                function Add(name, value) {
                    if (data[name]) {
                        if (data[name].constructor != Array) {
                            data[name] = [data[name]];
                        }
                        data[name][data[name].length] = value;
                    }
                    else {
                        data[name] = value;
                    }
                }
                ;
                // element attributes
                var c, cn;
                // child elements
                for (c = 0; cn = node.childNodes[c]; c++) {
                    if (cn.nodeType == 1) {
                        if (cn.childNodes.length == 1 && cn.firstChild.nodeType == 3) {
                            // text value
                            Add(cn.nodeName, cn.firstChild.nodeValue);
                        }
                        else {
                            // sub-object
                            Add(cn.nodeName, this.xml2json(cn));
                        }
                    }
                }
                return data;
            }
            catch (e) {
                console.log(e.message);
            }
        };
        return ImageManager;
    })();
    exports.ImageManager = ImageManager;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9iaW5nLmltYWdlLnRzIl0sIm5hbWVzIjpbIkltYWdlTWFuYWdlciIsIkltYWdlTWFuYWdlci5jb25zdHJ1Y3RvciIsIkltYWdlTWFuYWdlci5wYXJzZVhNTCIsIkltYWdlTWFuYWdlci5nZXQiLCJJbWFnZU1hbmFnZXIueG1sMmpzb24iLCJJbWFnZU1hbmFnZXIueG1sMmpzb24uQWRkIl0sIm1hcHBpbmdzIjoiO0lBQUEsWUFBWSxDQUFDO0lBSWI7UUFTSUEsc0JBQVlBLElBQVlBO1lBQ3BCQyxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUN0Q0EsQ0FBQ0E7UUFST0QsK0JBQVFBLEdBQWhCQSxVQUFpQkEsSUFBWUE7WUFDekJFLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLFNBQVNBLEVBQUVBLENBQUNBO1lBQzdCQSxJQUFJQSxHQUFHQSxHQUFHQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxFQUFFQSxpQkFBaUJBLENBQUNBLENBQUNBO1lBQzFEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUErQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDbkVBLENBQUNBO1FBTURGLDBCQUFHQSxHQUFIQTtZQUNJRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUM3QkEsQ0FBQ0E7UUFFT0gsK0JBQVFBLEdBQWhCQSxVQUFvQkEsSUFBd0JBO1lBQ3hDSSxJQUFJQSxDQUFDQTtnQkFDREEsSUFBSUEsSUFBSUEsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBRWRBLGlCQUFpQkE7Z0JBQ2pCQSxhQUFhQSxJQUFJQSxFQUFFQSxLQUFLQTtvQkFDcEJDLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO3dCQUNiQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxXQUFXQSxJQUFJQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDbENBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO3dCQUM5QkEsQ0FBQ0E7d0JBQ0RBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO29CQUMxQ0EsQ0FBQ0E7b0JBQ0RBLElBQUlBLENBQUNBLENBQUNBO3dCQUNGQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQTtvQkFDdkJBLENBQUNBO2dCQUNMQSxDQUFDQTtnQkFBQUQsQ0FBQ0E7Z0JBRUZBLHFCQUFxQkE7Z0JBQ3JCQSxJQUFJQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFFVkEsaUJBQWlCQTtnQkFDakJBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO29CQUN2Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ25CQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxVQUFVQSxDQUFDQSxRQUFRQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDM0RBLGFBQWFBOzRCQUNiQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxFQUFFQSxFQUFFQSxDQUFDQSxVQUFVQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTt3QkFDOUNBLENBQUNBO3dCQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTs0QkFDRkEsYUFBYUE7NEJBQ2JBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO3dCQUN4Q0EsQ0FBQ0E7b0JBQ0xBLENBQUNBO2dCQUNMQSxDQUFDQTtnQkFFREEsTUFBTUEsQ0FBSUEsSUFBSUEsQ0FBQ0E7WUFDbkJBLENBQUVBO1lBQUFBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNUQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtZQUMzQkEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFDTEosbUJBQUNBO0lBQURBLENBeERBLEFBd0RDQSxJQUFBO0lBeERZLG9CQUFZLGVBd0R4QixDQUFBIiwiZmlsZSI6ImFwcC9zZXJ2aWNlcy9iaW5nLmltYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IHtJQmluZ0ltYWdlUmVzdWx0LCBJQmluZ0ltYWdlfSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEltYWdlTWFuYWdlciB7XHJcbiAgICBwcml2YXRlIGltYWdlczogSUJpbmdJbWFnZVJlc3VsdDtcclxuXHJcbiAgICBwcml2YXRlIHBhcnNlWE1MKGRhdGE6IHN0cmluZyk6IElCaW5nSW1hZ2VSZXN1bHQge1xyXG4gICAgICAgIGxldCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XHJcbiAgICAgICAgbGV0IHhtbCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZGF0YSwgJ2FwcGxpY2F0aW9uL3htbCcpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnhtbDJqc29uPHsgaW1hZ2VzOiBJQmluZ0ltYWdlUmVzdWx0IH0+KHhtbCkuaW1hZ2VzO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzID0gdGhpcy5wYXJzZVhNTChkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQoKTogQXJyYXk8SUJpbmdJbWFnZT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmltYWdlcy5pbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHhtbDJqc29uPFQ+KG5vZGU6IEVsZW1lbnQgfCBEb2N1bWVudCk6IFQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0ge307XHJcblxyXG4gICAgICAgICAgICAvLyBhcHBlbmQgYSB2YWx1ZVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBBZGQobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbbmFtZV0uY29uc3RydWN0b3IgIT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IFtkYXRhW25hbWVdXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtuYW1lXVtkYXRhW25hbWVdLmxlbmd0aF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIGVsZW1lbnQgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICB2YXIgYywgY247XHJcblxyXG4gICAgICAgICAgICAvLyBjaGlsZCBlbGVtZW50c1xyXG4gICAgICAgICAgICBmb3IgKGMgPSAwOyBjbiA9IG5vZGUuY2hpbGROb2Rlc1tjXTsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY24ubm9kZVR5cGUgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbi5jaGlsZE5vZGVzLmxlbmd0aCA9PSAxICYmIGNuLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0ZXh0IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFkZChjbi5ub2RlTmFtZSwgY24uZmlyc3RDaGlsZC5ub2RlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3ViLW9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBBZGQoY24ubm9kZU5hbWUsIHRoaXMueG1sMmpzb24oY24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiA8VD5kYXRhO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
